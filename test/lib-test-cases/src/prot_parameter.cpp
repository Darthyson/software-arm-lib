/*
 *  prot_parameter.cpp - Test case for programming the parameters
 *
 *  Copyright (c) 2014 Martin Glueck <martin@mangari.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 3 as
 *  published by the Free Software Foundation.
 */

#include "protocol.h"

typedef struct
{
    unsigned char  state;
    bool           connected;
    unsigned short ownAddress;
} ProtocolTestState;

static ProtocolTestState protoState[2];

#define VaS(s) ((ProtocolTestState *) (s))

static void tc_eepromSetup(void)
{
    bcuUnderTest->userEeprom->addrTabSize()   = 0x01;

    bcuUnderTest->userEeprom->userEepromData[0x1D8 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1D9 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1DA - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1DB - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1DC - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1DD - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1DE - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1DF - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E0 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E1 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E2 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E3 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E4 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E5 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E6 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E7 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E8 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1E9 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1EA - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1EB - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1EC - EEPROM_START] = 0x03;
    bcuUnderTest->userEeprom->userEepromData[0x1ED - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1EE - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1EE - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1EF - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1F0 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1F1 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1F2 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1F3 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1F4 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1F5 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1F6 - EEPROM_START] = 0x55;
    bcuUnderTest->userEeprom->userEepromData[0x1F7 - EEPROM_START] = 0x55;
    bcuUnderTest->userEeprom->userEepromData[0x1F9 - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1FA - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1FB - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1FC - EEPROM_START] = 0x00;
    bcuUnderTest->userEeprom->userEepromData[0x1FD - EEPROM_START] = 0x00;
}

static void tc_setup(Telegram* tel, uint16_t telCount)
{
    bcuUnderTest->setOwnAddress(0x1112); // set own address to 1.1.18
    telegramPreparation(bcuUnderTest, tel, telCount);
}

static void connect(void * state, unsigned int param)
{
    VaS(state)->connected = true;
}

static void disconnect(void * state, unsigned int param)
{
    VaS(state)->connected = false;
}

static Telegram testCaseTelegrams[] =
{ {TEL_RX,  7, 0, 0, connect             , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0x80}} //   1
, {TEL_RX,  8, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x61, 0x43, 0x00}} //   2
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xC2}} //   3
, {TEL_TX, 10, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x63, 0x43, 0x40, dummyMaskVersionHigh, dummyMaskVersionLow}} //   4
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xC2}} //   5
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x46, 0x01, 0x01, 0x04}} //   6
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xC6}} //   7
, {TEL_TX, 11, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x64, 0x46, 0x41, 0x01, 0x04, 0x04}} //   8
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xC6}} //   9
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x4A, 0x04, 0x01, 0x04}} //  10
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xCA}} //  11
, {TEL_TX, 14, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x67, 0x4A, 0x44, 0x01, 0x04, 0x04, 0x20, 0x60, 0x01}} //  12
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xCA}} //  13
, {TEL_RX,  7, 0, 0, disconnect          , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0x81}} //  14
, {TEL_RX,  7, 0, 0, connect             , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0x80}} //  15
, {TEL_RX,  8, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x61, 0x43, 0x00}} //  16
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xC2}} //  17
, {TEL_TX, 10, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x63, 0x43, 0x40, dummyMaskVersionHigh, dummyMaskVersionLow}} //  18
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xC2}} //  19
, {TEL_RX, 11, 0, 1, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x64, 0x46, 0x81, 0x01, 0x0D, 0x00}} //  20
, {TEL_TX,  7, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xC6}} //  21
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x4A, 0x01, 0x01, 0x0D}} //  22
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xCA}} //  23
, {TEL_TX, 11, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x64, 0x46, 0x41, 0x01, 0x0D, 0x00}} //  24
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xC6}} //  25
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x4E, 0x01, 0x01, 0x16}} //  26
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xCE}} //  27
, {TEL_TX, 11, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x64, 0x4A, 0x41, 0x01, 0x16, 0x01}} //  28
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xCA}} //  29
, {TEL_RX, 11, 0, 1, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x64, 0x52, 0x81, 0x01, 0x16, 0x01}} //  30
, {TEL_TX,  7, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xD2}} //  31
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x56, 0x01, 0x01, 0x16}} //  32
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xD6}} //  33
, {TEL_TX, 11, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x64, 0x4E, 0x41, 0x01, 0x16, 0x01}} //  34
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xCE}} //  35
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x5A, 0x0C, 0x01, 0xD8}} //  36
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xDA}} //  37
, {TEL_TX, 22, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x6F, 0x52, 0x4C, 0x01, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}} //  38
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xD2}} //  39
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x5E, 0x0C, 0x01, 0xE4}} //  40
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xDE}} //  41
, {TEL_TX, 22, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x6F, 0x56, 0x4C, 0x01, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00}} //  42
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xD6}} //  43
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x62, 0x08, 0x01, 0xF0}} //  44
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xE2}} //  45
, {TEL_TX, 18, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x6B, 0x5A, 0x48, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55}} //  46
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xDA}} //  47
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x66, 0x05, 0x01, 0xF9}} //  48
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xE6}} //  49
, {TEL_TX, 15, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x68, 0x5E, 0x45, 0x01, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x00}} //  50
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xDE}} //  51
, {TEL_RX, 19, 0, 1, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x6C, 0x6A, 0x89, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}} //  52
, {TEL_TX,  7, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xEA}} //  53
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x6E, 0x09, 0x00, 0xCE}} //  54
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xEE}} //  55
, {TEL_TX, 19, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x6C, 0x62, 0x49, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}} //  56
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xE2}} //  57
, {TEL_RX, 19, 0, 1, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x6C, 0x72, 0x89, 0x00, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}} //  58
, {TEL_TX,  7, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xF2}} //  59
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x76, 0x09, 0x00, 0xD7}} //  60
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xF6}} //  61
, {TEL_TX, 19, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x6C, 0x66, 0x49, 0x00, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}} //  62
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xE6}} //  63
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x7A, 0x01, 0x01, 0x16}} //  64
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xFA}} //  65
, {TEL_TX, 11, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x64, 0x6A, 0x41, 0x01, 0x16, 0x01}} //  66
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xEA}} //  67
, {TEL_RX, 11, 0, 1, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x64, 0x7E, 0x81, 0x01, 0x0D, 0xFF}} //  68
, {TEL_TX,  7, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xFE}} //  69
, {TEL_RX, 10, 0, 2, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x63, 0x42, 0x01, 0x01, 0x0D}} //  70
, {TEL_TX,  7, 1, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x60, 0xC2}} //  71
, {TEL_TX, 11, 0, 0, NULL                , {0xB0, 0x11, 0x12, 0x00, 0x01, 0x64, 0x6E, 0x41, 0x01, 0x0D, 0xFF}} //  72
, {TEL_RX,  7, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0xEE}} //  73
, {TEL_RX,  8, 0, 0, NULL                , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x61, 0x47, 0x80}} //  74
, {TEL_RX,  7, 0, 0, disconnect          , {0xB0, 0x00, 0x01, 0x11, 0x12, 0x60, 0x81}} //  75
, {END}
};

static void gatherProtocolState(ProtocolTestState * state, ProtocolTestState * refState)
{
    state->state      = bcuUnderTest->userRam->status();
    state->connected  = bcuUnderTest->directConnection();
    state->ownAddress = bcuUnderTest->userEeprom->addrTab()[0] << 8 | bcuUnderTest->userEeprom->addrTab()[1];

    if(refState)
    {
        REQUIRE(state->state      == refState->state);
        REQUIRE(state->ownAddress == refState->ownAddress);
        REQUIRE(state->connected  == refState->connected);
    }
}

static Test_Case testCase =
{
    "Para Prog",
    0x0004, 0x2060, 0x01,
    0,
    tc_eepromSetup,
    tc_setup,
    (StateFunction *) gatherProtocolState,
    (TestCaseState *) &protoState[0],
    (TestCaseState *) &protoState[1],
    testCaseTelegrams,
};

TEST_CASE("Programming of the parameters", "[protocol][parameter]")
{
    SECTION("BCU 1") {
        executeTest(BCU_1, &testCase);
    }

    SECTION("BCU 2") {
        executeTest(BCU_2, &testCase);
    }
///\todo implement TEST for 0x07xx masks
/*
    SECTION("BCU 0x0701 (BIM112)") {
        executeTest(BCU_0701, &testCase);
    }

    SECTION("BCU 0x0705 (BIM112)") {
        executeTest(BCU_0705, &testCase);
    }

    SECTION("BCU 0x07B0") {
        executeTest(BCU_07B0, &testCase);
    }
*/
}
